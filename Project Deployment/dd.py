# -*- coding: utf-8 -*-
"""APP

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HCtA_V4HnbMc5XtOywCF0oDLmZsAAsQq
"""

import pickle
import streamlit as st
from PIL import Image

model = "final.pkl"
with open(model,"rb") as file:
  final = pickle.load(file)

cv = "cv.pkl"
with open(cv,"rb") as file:
  cv = pickle.load(file)

def preprocess_val(val):
    return val

light_theme = """
    <style>
        body {
            background-color: #f0f0f0;  /* Light gray background */
            color: #333;  /* Dark text color */
            font-family: Arial, sans-serif;  /* Default font family */
        }
        .stApp {
            margin-top: 3em;  /* Adjust top margin */
        }
        .stTitle {
            color: #008000;  /* Green title color */
        }
    </style>
"""


st.markdown(light_theme, unsafe_allow_html=True)

st.title(":chart_with_upwards_trend: Sentiment Analysis Prediction Using Logistic Regression")

# defining emojis
emoji_positive = "üòÉ"
emoji_negative = "üòû"
emoji_neutral = "üòê"

#creating glowing colour effect with css
def get_glowing_css(color):
  return f"""@keyframes glowing{{
    0%{{
      text-shadow: 0 0 5px{color};
    }}
    50%{{
      text-shadow: 0 0 20px{color};
    }}
    100%{{
      text-shadow: 0 0 5px{color};
    }}
  }}"""

#css for glowing effect
glowing_css = get_glowing_css("#ffd700")

st.markdown(f"<style>{glowing_css}</style>",unsafe_allow_html=True)

user_input = st.text_area("Enter the Sentence for Sentiment Prediction","")
preprocessed_input = preprocess_val(user_input)

# making prediction

if st.button("predict"):
  if not user_input or not cv.transform([preprocessed_input]).nnz:
    st.warning("Please Enter the Valid Sentence For Prediction")
  else:
    try:
      user_input = cv.transform([preprocessed_input])
      prediction = final.predict(user_input)
      senti_labels = ["Negative","Neutral","Positive"]
      prediction_sentiment = senti_labels[prediction[0]]
      #displaying sentiment prediction
      st.write(f"Predicted Sentiment: {prediction_sentiment}")
      if prediction[0]== 0:
        glowing_emoji = emoji_negative
        glowing_colour = "#ffd700"
      elif prediction[0]== 1:
        glowing_emoji = emoji_neutral
        glowing_colour = "#cOcOcO"

      elif prediction[0] == 2:
        glowing_emoji = emoji_positive
        glowing_colour = "#ff6347"
      st.markdown(f'<span style="font-size: 4em; animation: glowing 1.5s infinite; color: {glowing_colour};">{glowing_emoji}</span>',
                        unsafe_allow_html=True)




    except Exception as e:
      st.error(f"An Error Occured: {e}")

